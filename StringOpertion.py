
#coding=utf-8
#!/usr/bin/env python
#-----------------------------------------------------------------------------------------
#website = 'http://baidu.com'
##website[-3:] = 'ccc'            #'str' object does not support item assignment
#print (website
#-----------------------------------------------------------------------------------------

##-----------------------------------------------------------------------------------------
#format = 'hello: %s \t your have new message: %s'
#message = ('thmphons','See you again!')
#print (format % message
#print ('hello: %s \t your have new message: %s   percent : %d %%' % ('tom','How are you!',120)
##-----------------------------------------------------------------------------------------


##-----------------------------------------------------------------------------------------
#import math
#print ('precent is %.4f%%' % 120

#str = 'testing string %s' % 'we are pear!'
#print (str

#print ('Pi is %.10f' % math.pi
##-----------------------------------------------------------------------------------------


##-----------------------------------------------------------------------------------------
#str = 'go to %-s' % 120
#str2 = 'go toss %o' % 20000
#str3 = 'go toss %o' % 20000
#print (str
#print (str2
##-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------
import math
import struct
print ('dec: %d' % 15)
print ('otc: %o' % 16)
print ('dec: %x' % 15)
print ('dec: %X' % 15)

#字段宽度是转换后的值所保留的最小字符个数
#精度(对于数字来说)则是结果中应该包含的小数位数，若是对于字符串来说是转换后所能包含的最大字符个数
print ('scientific: %e' % 3.14)
print ('scientific: %e' % 1000.1314)
print ('scientific: %.10E' % 1000.1314)
print ('float: %f' % 10)
print ('Pi is %.25f' % math.pi )
print ('Pi is %10.5f' % math.pi) #前面五位 " 3.14159"

#小数点前面的是字段宽度为至少要显示的字符数(如果不足默认用空格填充)，而小点后面的为精度表示最大可以显示的字符数，注意在字符串中使用，如果精度小于宽度，会把后面的数据截断然后在前面填充空格；

print ('%.4s' % 'z_ero')
print ('%4s' % 'z_ero')
print ('%4s' % 'z_')
print ('%4.4s' % 'z_ero')
print ('%5.4s' % 'z_ero')
print ('%4.5s' % 'z_ero')

#另外，可以使用*作为字段宽度或者精度，此时该值会从元组中获取
print ('%*s' % (10, 'z_ero'))
print ('%.*s' % (3, 'z_ero'))
print ('%*.*s' % (5,3, 'z_ero'))
print ('%*.*s' % (10,5, 'z_ero6'))

#-----------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------

#符号、对齐和0补充
#在字段宽度和精度的前面还可以放置一个"标识"：0、+、-和空格
#0表示：如果数字位数不够，就在前面用0填充
#-表示：左对齐(右侧出现空格)
#空格表示：在正数前面加空格，用在正负数对齐上
#+表示：不管是正数还是负数都标出符号
import math
print ('%010.2f' % math.pi)
print ('%010.5f' % math.pi)       #左补零，小数点保持5位，总数10位
print ('%-10.2f' % math.pi)       #左对齐
print (('%5d' % 10) + '\n' + ('% 5d' % -10) + '\n' + ('%+5d' % 10))

#-----------------------------------------------------------------------------------------

rawfile = open("requirements.txt","rb")    
rawstring = rawfile.read()
print('========' , len(rawstring))
print('========' , len(rawstring)*'B')
rawdata = struct.unpack(len(rawstring)*'B',rawstring)
print(rawdata)
#-----------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------
